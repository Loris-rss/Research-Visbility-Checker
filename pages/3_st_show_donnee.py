from io import BytesIO

import streamlit as st
import pandas as pd
from utilitaire import reset_session, reach_st_comparaison, reach_st_donnee, read_markdown_file

st.title("3. V√©rifier les donn√©es")

st.markdown("""
Cette page vous permet de visualiser et d'explorer les donn√©es collect√©es pour le chercheur s√©lectionn√©. Vous pouvez consulter les articles trouv√©s dans chaque base de donn√©es, examiner les statistiques principales et analyser la distribution temporelle des publications.
""")

with st.expander("Guide de la page pour la visualisation des donn√©es.", expanded=False):
    st.markdown(read_markdown_file(r"md/Visualisation des donn√©es.md"), unsafe_allow_html=True)

st.write("Voici les donn√©es trouv√©es pour le chercheur :")

tabs = st.tabs(list(st.session_state["databases"].keys()))

# Pour chaque onglet, afficher le DataFrame correspondant
for tab, (db_name, df) in zip(tabs, st.session_state["databases"].items()):
    # Afficher les donn√©es de la base de donn√©es
    with tab:
        st.header(f"Donn√©es de {db_name}")
        # V√©rifier que df est bien un DataFrame
        if not isinstance(df, pd.DataFrame):
            st.error(f"‚ùå Erreur : Les donn√©es de {db_name} ne sont pas dans le bon format.")
            st.write(f"Type re√ßu : {type(df)}")
            st.write(f"Contenu : {df}")
            st.info("üí° Retournez √† l'√©tape d'importation des donn√©es pour corriger le probl√®me.")
            continue
        # Supprimer la colonne "Unnamed: 0" si elle existe
        st.write(f"üìä Colonnes disponibles : {list(df.columns)}")   
        if "Unnamed: 0" in df.columns:
            df = df.drop(columns=["Unnamed: 0"])     
        # Afficher le nombre d'articles de recherche trouv√©s
        st.write(f"üìö **{len(df)} articles de recherche trouv√©s.**")     
        # V√©rifier que le DataFrame n'est pas vide
        if df.empty:
            st.warning(f"‚ö†Ô∏è Aucune donn√©e trouv√©e pour {db_name}")
            continue     
        # Afficher les donn√©es dans un tableau
        st.dataframe(df)

        # D√©finir les colonnes de date
        date_list_col = ["Year","year", "Date", "publicationDate_s", "Publication Year"]

        # D√©finir la bonne colonne de date pour chaque dataframe
        right_col = "".join([col for col in df.columns if col in date_list_col])
    
        csv, xlsx = st.columns(2)
        
        # Cr√©ation du bouton de t√©l√©chargement en csv
        with csv:
            csv_data = df.to_csv(index=False).encode("utf-8")

            # Cr√©er le bouton de t√©l√©chargement
            st.download_button(
                label="T√©l√©charger les donn√©es en csv",
                data=csv_data,
                file_name=f"{db_name}.csv",
                mime="text/csv"
            )
        
        # Cr√©ation du bouton de t√©l√©chargement en excel
        with xlsx:
            output = BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False, sheet_name='Sheet1')

            # Repositionner le curseur du buffer au d√©but
            output.seek(0)

            # T√©l√©chargement des donn√©es en excel
            st.download_button(
                label="T√©l√©charger les donn√©es en excel",
                data=output,
                file_name=f"{db_name}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )


        st.divider()

        st.markdown("## Distribution temporelle des publications")
        
        # Distribution des publications par ann√©e
        with st.expander("Distribution temporelle des publications", expanded=False):
            st.markdown("""
            Cette section pr√©sente la r√©partition des publications scientifiques par ann√©e. Cela permet de visualiser l'√©volution du volume de publications au fil du temps pour le chercheur s√©lectionn√©.
            """)
            publications_par_annee = df[right_col].value_counts().sort_index()
            st.bar_chart(publications_par_annee)

st.divider()

# Cr√©ation des boutons de r√©initialisation et de retour
reset, back, forward = st.columns(3)
with reset:
    reset_session()
with back:
    reach_st_donnee(message = "Revenir √† l'importation des donn√©es", type_button = 'secondary')
with forward:
    reach_st_comparaison()